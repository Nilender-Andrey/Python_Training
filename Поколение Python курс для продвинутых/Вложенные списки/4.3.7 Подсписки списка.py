"""
Подсписок — часть другого списка. Подсписок может содержать один элемент, несколько или даже ни одного. 
Например, [1], [2], [3] и [4] — подсписки списка [1, 2, 3, 4]. 
Список [2, 3] — подсписок списка [1, 2, 3, 4], но список [2, 4] не подсписок списка [1, 2, 3, 4], 
так как элементы 2 и 4 во втором списке не смежные (т. к. они разрываются элементом 3). 

Пустой список — подсписок любого списка. Сам список — подсписок самого себя, то есть список [1, 2, 3, 4] подсписок списка [1, 2, 3, 4].

На вход программе подается строка текста, содержащая символы, отделенные символом пробела.
Из данной строки формируется список. Напишите программу, которая выводит список, содержащий все возможные подсписки списка, включая пустой список.

# Пример:
1 2 3 0

# Результат: 
[[], ['1'], ['2'], ['3'], ['0'], ['1', '2'], ['2', '3'], ['3', '0'], ['1', '2', '3'], ['2', '3', '0'], ['1', '2', '3', '0']]
"""

# Решение:

list_str = input().split()
variants = [[]]


# Переделанная функция из задачи 4.3.6 Разбиение на чанки
def sublist(list_str: list[str], n: int):
    return [list_str[i:i+n] for i in range(len(list_str)) if len(list_str[i:i + n]) == n]


for i in range(1, len(list_str) + 1):
    variants.extend(sublist(list_str, i))

print(variants)


""" Оптимизированный вариант

list_str = input().split()
variants = [[]]

for i in range(len(list_str)):
    variants.extend([list_str[j:j+i+1] for j in range(len(list_str)-i)])

print(variants)

"""
