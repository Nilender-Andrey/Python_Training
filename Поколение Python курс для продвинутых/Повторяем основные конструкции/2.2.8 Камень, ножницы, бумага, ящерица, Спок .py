"""
Проиграв 10 раз Тимуру, Руслан понял, что так дело дальше не пойдет, и решил усложнить игру.
Теперь Тимур и Руслан играют в игру Камень, ножницы, бумага, ящерица, Спок.
Помогите ребятам вновь бросить честный жребий и определить, кто будет делать следующий модуль в новом курсе.

На вход программе подаются две строки текста, содержащие по одному слову из перечня "камень", "ножницы", "бумага", "ящерица" или "Спок".
На первой строке записан выбор Тимура, на второй – выбор Руслана.

Бумага заворачивает камень,
камень давит ящерицу,
ящерица травит Спока,
Спок ломает ножницы,
ножницы отрезают голову ящерице,
ящерица ест бумагу,
на бумаге улики против Спока,
Спок испаряет камень,
камень затупляет ножницы.
"""

# Решение

graf = {'ножницы': ['бумага', 'ящерица'], 'бумага': ['камень', 'Спок'], 'камень': [
    'ножницы', 'ящерица'], 'ящерица': ['Спок', 'бумага'], 'Спок': ['ножницы', 'камень']}

t, r = input(), input()

if (t == r):
    print("ничья")
elif (r in graf[t]):
    print("Тимур")
else:
    print("Руслан")


""" Оптимальное решение
options = ["камень", "ящерица", "Спок", "ножницы", "бумага"]
results = ["ничья", "Руслан", "Тимур", "Руслан", "Тимур"]

timur_move = input()
ruslan_move = input()

case = options.index(timur_move) - options.index(ruslan_move)
res = results[case]

print(res)
"""

""" Очень интересное решение
Правила доминирования хорошо определяются по чётности расстояния между персонажами, отмеренному на круге по часовой стрелке.  
Расстояние по часовой стрелке вычисляется взятием остатка от деления на число персонажей/жестов.

g = ('ножницы', 'бумага', 'камень', 'ящерица', 'Спок')
dist = (g.index(input()) - g.index(input())) % len(g)
print(('ничья', 'Тимур', 'Руслан')[dist and dist % 2 + 1]
"""
